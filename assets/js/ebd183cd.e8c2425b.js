"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[961],{3816:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});var o=n(4848),s=n(8453);const c={},l="Public document picker",r={id:"public/document-picker",title:"Public document picker",description:"react-native-document-picker is a React Native wrapper for:",source:"@site/docs/public/document-picker.md",sourceDirName:"public",slug:"/public/document-picker",permalink:"/docs/public/document-picker",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"guidesSidebar",previous:{title:"Installation & Setup",permalink:"/docs/install"},next:{title:"Introduction",permalink:"/docs/sponsor-only/intro"}},t={},d=[{value:"Maintenance status",id:"maintenance-status",level:3},{value:"API",id:"api",level:2},{value:"<code>pickSingle(options)</code> / <code>pick(options)</code>",id:"picksingleoptions--pickoptions",level:3},{value:"<code>pickDirectory()</code>",id:"pickdirectory",level:3},{value:"Options",id:"options",level:2},{value:"<code>allowMultiSelection</code>:<code>boolean</code>",id:"allowmultiselectionboolean",level:4},{value:"<code>type</code>:<code>string|Array&lt;string&gt;</code>",id:"typestringarraystring",level:4},{value:"[iOS and Android only] <code>copyTo</code>:<code>&quot;cachesDirectory&quot; | &quot;documentDirectory&quot;</code>",id:"ios-and-android-only-copytocachesdirectory--documentdirectory",level:4},{value:"[iOS only] <code>presentationStyle</code>:<code>&#39;fullScreen&#39; | &#39;pageSheet&#39; | &#39;formSheet&#39; | &#39;overFullScreen&#39;</code>",id:"ios-only-presentationstylefullscreen--pagesheet--formsheet--overfullscreen",level:4},{value:"[iOS only] <code>transitionStyle</code>:<code>&#39;coverVertical&#39; | &#39;flipHorizontal&#39; | &#39;crossDissolve&#39; | &#39;partialCurl&#39;</code>",id:"ios-only-transitionstylecoververtical--fliphorizontal--crossdissolve--partialcurl",level:4},{value:"[iOS only] <code>mode</code>:<code>&quot;import&quot; | &quot;open&quot;</code>",id:"ios-only-modeimport--open",level:4},{value:"[Windows only] <code>readContent</code>:<code>boolean</code>",id:"windows-only-readcontentboolean",level:4},{value:"Result",id:"result",level:2},{value:"<code>uri</code>",id:"uri",level:4},{value:"<code>fileCopyUri</code>",id:"filecopyuri",level:4},{value:"<code>type</code>",id:"type",level:4},{value:"<code>name</code>",id:"name",level:4},{value:"<code>size</code>",id:"size",level:4},{value:"[Windows only] <code>content</code>",id:"windows-only-content",level:4},{value:"<code>types.*</code>",id:"types",level:2},{value:"<code>isCancel(err)</code>",id:"iscancelerr",level:4},{value:"<code>isInProgress(err)</code>",id:"isinprogresserr",level:4},{value:"[iOS only] <code>releaseSecureAccess(uris: Array&lt;string&gt;)</code>",id:"ios-only-releasesecureaccessuris-arraystring",level:4},{value:"Example",id:"example",level:2},{value:"How to upload picked files?",id:"how-to-upload-picked-files",level:2}];function a(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h1,{id:"public-document-picker",children:"Public document picker"}),"\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"react-native-document-picker"})," is a React Native wrapper for:"]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["Apple's ",(0,o.jsx)(i.code,{children:"UIDocumentPickerViewController"})]}),"\n",(0,o.jsxs)(i.li,{children:["Android's ",(0,o.jsx)(i.code,{children:"Intent.ACTION_GET_CONTENT"})]}),"\n",(0,o.jsxs)(i.li,{children:["Windows ",(0,o.jsx)(i.code,{children:"Windows.Storage.Pickers"})]}),"\n"]}),"\n",(0,o.jsx)(i.h3,{id:"maintenance-status",children:"Maintenance status"}),"\n",(0,o.jsxs)(i.p,{children:["Currently, the maintainer is focusing on the ",(0,o.jsx)(i.a,{href:"/docs/sponsor-only/intro",children:"sponsor-only version"})," of the library. The public version will receive security / critical bug fixes from the maintainer but new feature development is not planned at the moment."]}),"\n",(0,o.jsx)(i.h2,{id:"api",children:"API"}),"\n",(0,o.jsxs)(i.h3,{id:"picksingleoptions--pickoptions",children:[(0,o.jsx)(i.code,{children:"pickSingle(options)"})," / ",(0,o.jsx)(i.code,{children:"pick(options)"})]}),"\n",(0,o.jsxs)(i.p,{children:["Use ",(0,o.jsx)(i.code,{children:"pickSingle"})," or ",(0,o.jsx)(i.code,{children:"pick"})," to open a document picker for the user to select file(s)."]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:["with ",(0,o.jsx)(i.code,{children:"pick"}),", you can use ",(0,o.jsx)(i.code,{children:"allowMultiSelection"})," param to control whether user can select multiple files (",(0,o.jsx)(i.code,{children:"false"})," by default). Returns a ",(0,o.jsx)(i.code,{children:"Promise<Array<DocumentPickerResponse>>"})]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"pickSingle"}),' is "sugar function" on top of ',(0,o.jsx)(i.code,{children:"pick"})," and only allows a single selection returns ",(0,o.jsx)(i.code,{children:"Promise<DocumentPickerResponse>"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.h3,{id:"pickdirectory",children:(0,o.jsx)(i.code,{children:"pickDirectory()"})}),"\n",(0,o.jsxs)(i.p,{children:["Open a system directory picker. Returns a promise that resolves to (",(0,o.jsx)(i.code,{children:"{ uri: string }"}),") of the directory selected by user."]}),"\n",(0,o.jsx)(i.h2,{id:"options",children:"Options"}),"\n",(0,o.jsx)(i.p,{children:"All the options are optional"}),"\n",(0,o.jsxs)(i.h4,{id:"allowmultiselectionboolean",children:[(0,o.jsx)(i.code,{children:"allowMultiSelection"}),":",(0,o.jsx)(i.code,{children:"boolean"})]}),"\n",(0,o.jsxs)(i.p,{children:["Whether selecting multiple files is allowed. For ",(0,o.jsx)(i.code,{children:"pick"}),", this is ",(0,o.jsx)(i.code,{children:"false"})," by default. ",(0,o.jsx)(i.code,{children:"allowMultiSelection"})," is ",(0,o.jsx)(i.code,{children:"false"})," for ",(0,o.jsx)(i.code,{children:"pickSingle"})," and cannot be overridden."]}),"\n",(0,o.jsxs)(i.h4,{id:"typestringarraystring",children:[(0,o.jsx)(i.code,{children:"type"}),":",(0,o.jsx)(i.code,{children:"string|Array<string>"})]}),"\n",(0,o.jsx)(i.p,{children:"The type or types of documents to allow selection of. An array of strings or single string."}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["On Android, these are MIME types such as ",(0,o.jsx)(i.code,{children:"text/plain"})," or partial MIME types such as ",(0,o.jsx)(i.code,{children:"image/*"}),". See ",(0,o.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types",children:"common MIME types"}),"."]}),"\n",(0,o.jsxs)(i.li,{children:["On iOS, these must be Apple ",(0,o.jsx)(i.a,{href:"https://developer.apple.com/documentation/uniformtypeidentifiers/system-declared_uniform_type_identifiers?language=objc",children:"Uniform Type Identifiers"})]}),"\n",(0,o.jsxs)(i.li,{children:["If ",(0,o.jsx)(i.code,{children:"type"})," is omitted it will be treated as ",(0,o.jsx)(i.code,{children:"*/*"})," or ",(0,o.jsx)(i.code,{children:"public.item"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(i.h4,{id:"ios-and-android-only-copytocachesdirectory--documentdirectory",children:["[iOS and Android only] ",(0,o.jsx)(i.code,{children:"copyTo"}),":",(0,o.jsx)(i.code,{children:'"cachesDirectory" | "documentDirectory"'})]}),"\n",(0,o.jsxs)(i.p,{children:["If specified, the picked file is copied to ",(0,o.jsx)(i.code,{children:"NSCachesDirectory"})," / ",(0,o.jsx)(i.code,{children:"NSDocumentDirectory"})," (iOS) or ",(0,o.jsx)(i.code,{children:"getCacheDir"})," / ",(0,o.jsx)(i.code,{children:"getFilesDir"})," (Android). The uri of the copy will be available in result's ",(0,o.jsx)(i.code,{children:"fileCopyUri"}),". If copying the file fails (e.g. due to lack of free space), ",(0,o.jsx)(i.code,{children:"fileCopyUri"})," will be ",(0,o.jsx)(i.code,{children:"null"}),", and more details about the error will be available in ",(0,o.jsx)(i.code,{children:"copyError"})," field in the result."]}),"\n",(0,o.jsxs)(i.p,{children:["This should help if you need to work with the file(s) later on, because by default, ",(0,o.jsx)(i.a,{href:"https://developer.apple.com/documentation/uikit/uidocumentpickerdelegate/2902364-documentpicker",children:"the picked documents are temporary files. They remain available only until your application terminates"}),". This may impact performance for large files, so keep this in mind if you expect users to pick particularly large files and your app does not need immediate read access."]}),"\n",(0,o.jsx)(i.p,{children:"On Android, this can be used to obtain local, on-device copy of the file (e.g. if user picks a document from Google Drive, this will download it locally to the phone)."}),"\n",(0,o.jsxs)(i.h4,{id:"ios-only-presentationstylefullscreen--pagesheet--formsheet--overfullscreen",children:["[iOS only] ",(0,o.jsx)(i.code,{children:"presentationStyle"}),":",(0,o.jsx)(i.code,{children:"'fullScreen' | 'pageSheet' | 'formSheet' | 'overFullScreen'"})]}),"\n",(0,o.jsxs)(i.p,{children:["Controls how the picker is presented, e.g. on an iPad you may want to present it fullscreen. Defaults to ",(0,o.jsx)(i.code,{children:"pageSheet"}),"."]}),"\n",(0,o.jsxs)(i.h4,{id:"ios-only-transitionstylecoververtical--fliphorizontal--crossdissolve--partialcurl",children:["[iOS only] ",(0,o.jsx)(i.code,{children:"transitionStyle"}),":",(0,o.jsx)(i.code,{children:"'coverVertical' | 'flipHorizontal' | 'crossDissolve' | 'partialCurl'"})]}),"\n",(0,o.jsxs)(i.p,{children:["Configure the transition style of the picker. Defaults to ",(0,o.jsx)(i.code,{children:"coverVertical"}),", when the picker is presented, its view slides up from the bottom of the screen."]}),"\n",(0,o.jsxs)(i.h4,{id:"ios-only-modeimport--open",children:["[iOS only] ",(0,o.jsx)(i.code,{children:"mode"}),":",(0,o.jsx)(i.code,{children:'"import" | "open"'})]}),"\n",(0,o.jsxs)(i.p,{children:["Defaults to ",(0,o.jsx)(i.code,{children:"import"}),". If ",(0,o.jsx)(i.code,{children:"mode"})," is set to ",(0,o.jsx)(i.code,{children:"import"})," the document picker imports the file from outside to inside the sandbox, otherwise if ",(0,o.jsx)(i.code,{children:"mode"})," is set to ",(0,o.jsx)(i.code,{children:"open"})," the document picker opens the file in-place."]}),"\n",(0,o.jsxs)(i.h4,{id:"windows-only-readcontentboolean",children:["[Windows only] ",(0,o.jsx)(i.code,{children:"readContent"}),":",(0,o.jsx)(i.code,{children:"boolean"})]}),"\n",(0,o.jsxs)(i.p,{children:["Defaults to ",(0,o.jsx)(i.code,{children:"false"}),". If ",(0,o.jsx)(i.code,{children:"readContent"})," is set to true the content of the picked file/files will be read and supplied in the result object."]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsx)(i.p,{children:"Be aware that this can introduce a huge performance hit in case of big files. (The files are read completely and into the memory and encoded to base64 afterwards to add them to the result object)"}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsx)(i.p,{children:"However, reading the file directly from within the Thread which managed the picker can be necessary on Windows: Windows Apps can only read the Downloads folder and their own app folder by default and If a file is outside of these locations it cannot be acessed directly. However if the user picks the file through a file picker permissions to that file are granted implicitly."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"In addition to the default locations, an app can access additional files and folders by declaring capabilities in the app manifest (see App capability declarations), or by calling a file picker to let the user pick files and folders for the app to access (see Open files and folders with a picker).\n"})}),"\n",(0,o.jsx)(i.p,{children:(0,o.jsx)(i.a,{href:"https://docs.microsoft.com/en-us/windows/uwp/files/file-access-permissions",children:"https://docs.microsoft.com/en-us/windows/uwp/files/file-access-permissions"})}),"\n",(0,o.jsx)(i.p,{children:"Unfortunately that permission is not granted to the whole app, but only the Thread which handled the filepicker. Therefore, it can be useful to read the file directly."}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:["You can use ",(0,o.jsx)(i.code,{children:"react-native-fs"})," on Android and IOS to read the picked file."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"result",children:"Result"}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.code,{children:"pick"})," Promise resolves to an array of objects with the following keys."]}),"\n",(0,o.jsx)(i.h4,{id:"uri",children:(0,o.jsx)(i.code,{children:"uri"})}),"\n",(0,o.jsxs)(i.p,{children:["The URI representing the document picked by the user. ",(0,o.jsxs)(i.em,{children:["On iOS this will be a ",(0,o.jsx)(i.code,{children:"file://"})," URI for a temporary file in your app's container if ",(0,o.jsx)(i.code,{children:"mode"})," is not specified or set at ",(0,o.jsx)(i.code,{children:"import"})," otherwise it will be the original ",(0,o.jsx)(i.code,{children:"file://"})," URI. On Android this will be a ",(0,o.jsx)(i.code,{children:"content://"})," URI for a document provided by a DocumentProvider that must be accessed with a ContentResolver."]})]}),"\n",(0,o.jsx)(i.h4,{id:"filecopyuri",children:(0,o.jsx)(i.code,{children:"fileCopyUri"})}),"\n",(0,o.jsxs)(i.p,{children:["If ",(0,o.jsx)(i.code,{children:"copyTo"})," option is specified, this will point to a local copy of picked file. Otherwise, this is ",(0,o.jsx)(i.code,{children:"null"}),"."]}),"\n",(0,o.jsx)(i.h4,{id:"type",children:(0,o.jsx)(i.code,{children:"type"})}),"\n",(0,o.jsxs)(i.p,{children:["The MIME type of the file. ",(0,o.jsx)(i.em,{children:'On Android some DocumentProviders may not provide MIME types for their documents. On iOS this MIME type is based on the best MIME type for the file extension according to Apple\'s internal "Uniform Type Identifiers" database.'})]}),"\n",(0,o.jsx)(i.h4,{id:"name",children:(0,o.jsx)(i.code,{children:"name"})}),"\n",(0,o.jsxs)(i.p,{children:["The display name of the file. ",(0,o.jsx)(i.em,{children:"This is normally the filename of the file, but Android does not guarantee that this will be a filename from all DocumentProviders."})]}),"\n",(0,o.jsx)(i.h4,{id:"size",children:(0,o.jsx)(i.code,{children:"size"})}),"\n",(0,o.jsxs)(i.p,{children:["The file size of the document. ",(0,o.jsx)(i.em,{children:"On Android some DocumentProviders may not provide this information for a document."})]}),"\n",(0,o.jsxs)(i.h4,{id:"windows-only-content",children:["[Windows only] ",(0,o.jsx)(i.code,{children:"content"})]}),"\n",(0,o.jsxs)(i.p,{children:["The base64 encoded content of the picked file if the option ",(0,o.jsx)(i.code,{children:"readContent"})," was set to ",(0,o.jsx)(i.code,{children:"true"}),"."]}),"\n",(0,o.jsx)(i.h2,{id:"types",children:(0,o.jsx)(i.code,{children:"types.*"})}),"\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.*"})," provides a few common types for use as ",(0,o.jsx)(i.code,{children:"type"})," values, these types will use the correct format for each platform (MIME types on Android, UTIs on iOS)."]}),"\n",(0,o.jsx)(i.p,{children:"If you need to provide your own file type filtering:"}),"\n",(0,o.jsxs)(i.p,{children:["For Android, see ",(0,o.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types",children:"common MIME types"}),"."]}),"\n",(0,o.jsxs)(i.p,{children:["For iOS ",(0,o.jsx)(i.a,{href:"https://developer.apple.com/documentation/uniformtypeidentifiers/system-declared_uniform_type_identifiers?language=objc",children:"Uniform Type Identifiers"}),"."]}),"\n",(0,o.jsx)(i.p,{children:"Also, searching Google usually helps."}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.allFiles"}),": All document types, on Android this is ",(0,o.jsx)(i.code,{children:"*/*"}),", on iOS is ",(0,o.jsx)(i.code,{children:"public.item"})]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.images"}),": All image types"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.plainText"}),": Plain text files"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.audio"}),": All audio types"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.pdf"}),": PDF documents"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.zip"}),": Zip files"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.csv"}),": Csv files"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.doc"}),": doc files"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.docx"}),": docx files"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.ppt"}),": ppt files"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.pptx"}),": pptx files"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.xls"}),": xls files"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"DocumentPicker.types.xlsx"}),": xlsx files"]}),"\n"]}),"\n",(0,o.jsx)(i.h4,{id:"iscancelerr",children:(0,o.jsx)(i.code,{children:"isCancel(err)"})}),"\n",(0,o.jsxs)(i.p,{children:["If the user cancels the document picker without choosing a file (by pressing the system back button on Android or the Cancel button on iOS), the Promise will be rejected with a cancellation error. You can check for this error using ",(0,o.jsx)(i.code,{children:"DocumentPicker.isCancel(err)"})," allowing you to ignore it and cleanup any parts of your interface that may not be needed anymore."]}),"\n",(0,o.jsx)(i.h4,{id:"isinprogresserr",children:(0,o.jsx)(i.code,{children:"isInProgress(err)"})}),"\n",(0,o.jsxs)(i.p,{children:["If the user somehow manages to open multiple file pickers (e.g. due the app being unresponsive), then only the picked result from the last opened picker will be considered and the promises from previous opened pickers will be rejected with an error that you can check using ",(0,o.jsx)(i.code,{children:"DocumentPicker.isInProgress()"}),"."]}),"\n",(0,o.jsx)(i.p,{children:"This behavior might change in future to allow opening only a single picker at a time. The internal logic is currently implemented only on iOS."}),"\n",(0,o.jsxs)(i.h4,{id:"ios-only-releasesecureaccessuris-arraystring",children:["[iOS only] ",(0,o.jsx)(i.code,{children:"releaseSecureAccess(uris: Array<string>)"})]}),"\n",(0,o.jsxs)(i.p,{children:["If ",(0,o.jsx)(i.code,{children:"mode"})," is set to ",(0,o.jsx)(i.code,{children:"open"}),", iOS is giving you secure access to a file located outside from your sandbox.\nIn that case Apple is asking you to release the access as soon as you finish using the resource."]}),"\n",(0,o.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(i.p,{children:["See the example app in ",(0,o.jsx)(i.code,{children:"example"})," folder."]}),"\n",(0,o.jsx)(i.h2,{id:"how-to-upload-picked-files",children:"How to upload picked files?"}),"\n",(0,o.jsxs)(i.p,{children:["Use blob support that is built into react native - ",(0,o.jsx)(i.a,{href:"https://github.com/rnmods/react-native-document-picker/issues/70#issuecomment-384335402",children:"see comment"}),".\nIf you need to track upload progress, use ",(0,o.jsx)(i.code,{children:"XMLHttpRequest"})," ",(0,o.jsx)(i.a,{href:"https://gist.github.com/Tamal/9231005f0c62e1a3f23f60dc2f46ae35",children:"see here"})]}),"\n",(0,o.jsxs)(i.p,{children:["Alternatively, use ",(0,o.jsx)(i.a,{href:"https://github.com/johanneslumpe/react-native-fs",children:"https://github.com/johanneslumpe/react-native-fs"})]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>r});var o=n(6540);const s={},c=o.createContext(s);function l(e){const i=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(c.Provider,{value:i},e.children)}}}]);